# -*- org-use-sub-superscripts: nil; org-export-with-sub-superscripts: nil; -*-

#+title: README about the ispell_eo dictionary
#+STYLE: <style> pre { background-color: #191919 } pre { color:#00FF00 } </style>
#+OPTIONS: toc:nil
- *Name*:   ~./README~
- *Content*: Information about Esperanto dictionary for the Ispell speller
- *Created*: 2024-01-19 by Sergio Pokrovskij ~<sergio.pokrovskij(cxe)gmail.com>~
- *Version*: 4.0

Copyright © 1997, 1998, 2003, 2006, 2008, 2024 by Sergio Pokrovskij

This dictionary package is available on the terms of GNU General Public
License version 2.0 (Free Software Foundation, 675 Mass Ave, Cambridge,
MA 02139, USA).

#+TOC: headlines 3

* About the Package
Here is an Esperanto dictionary, compiled by Sergio Pokrovskij for the
versions 3+ of [[https://en.wikipedia.org/wiki/Ispell][Ispell]].

The dictionary can also be converted into an ~eo.utf-8.spl~ file for
use with the [[https://vimdoc.sourceforge.net/htmldoc/spell.html][Vim Speller]].

* Quick Install
** Ispell
You will first need to get Ispell 3.0+; it is available in most of
Linux repositories or at its [[https://www.cs.hmc.edu/~geoff/ispell][author's site]]; make sure that in its
=local.h= the =NO8BIT= thing is commented out and =MASKBITS = 64=. To
see the option ispell has been compiled with, please run

#+begin_src sh :exports both :results output :session
ispell -vv | grep MASKBITS
#+end_src

#+RESULTS:
: 	MASKBITS = 64

*** The Binary File
Here is a binary dictionary [[https://kovro.heliohost.org/eo/tools/ispelleo/eo.hash][eo.hash]], made for Linux x86_64. It should
be placed where ispell expects to find it, in my case it is
#+begin_src sh :exports both :results output :session
ispell -vv | grep LIBDIR
#+end_src

#+RESULTS:
: 	LIBDIR = "/usr/lib/ispell"

You can test your installation by an ASCII transliteration on any
terminal:
#+begin_src sh :exports both :results output :session
echo "Kuba harpisto sxajnis amuzigxi facilege cxe via jxauxda hxoro" |\
ispell -T cxirkaux -d eo
#+end_src

#+RESULTS:
#+begin_example
@(#) International Ispell Version 3.4.02 08 Jan 2021
word: ok
ok (derives from root HARPI)
ok (derives from root ^SAJNI)
ok (derives from root AMUZI)
ok (derives from root FACILEGA)
ok
ok (derives from root VI)
ok
ok

word: 
#+end_example
or by Unicode representation, if your terminal works in UTF-8:
#+begin_src sh :exports both :results output :session
echo "Ŝajnas ke sagaca monaĥo laŭtvoĉe refuzadis pregi syr herbaĵo" |\
ispell -P -T utf8 -d eo
#+end_src

#+RESULTS:
#+begin_example
@(#) International Ispell Version 3.4.02 08 Jan 2021
word: ok (derives from root ^SAJNI)
ok
ok
ok
ok (derives from root LA^UTVO^CA)
how about: refutadis, reuzadis, rifuzadis
how about: predi, preĝi, premi, preni, presi, preti, puregi, regi
how about: sur
ok (derives from root HERBO)

word: 
#+end_example
Also see the section [[* Usage]] below.


*** Building eo.hash
If the binary =eo.hash= proves incompatible with your system, you can
build it yourself from [[https://kovro.heliohost.org/eo/tools/ispelleo/eo.aff][eo.aff]] and [[https://kovro.heliohost.org/eo/tools/ispelleo/eo.asc][eo.asc]]:
1. Download the files.
2. Use the =buildhash= utility from the =ispell= distro:
#+begin_example
buildhash eo.asc eo.aff eo.hash
#+end_example
You now can try the new =eo.hash= and proceed back to [[*The Binary File]].

** Vim Spell
Presently the [[https://en.wikipedia.org/wiki/Vim_(text_editor)][Vim editor]] comes with its own speller and English
dictionaries. I have written a converter from my Ispell source
dictionary to the Vim Spell format (which is basically the [[https://en.wikipedia.org/wiki/MySpell][MySpell]]
format).

The ready-made packed dictionary is available for download as
[[https://kovro.heliohost.org/eo/tools/vim-spell/eo.utf-8.spl][eo.utf-8.spl]]. You can install it locally for yourself in
~$HOME/.vim/spell~, or in a system-wide manner in a =spell= or =after=
subdirectory of Vim's =runtimepath= variable. (To examine its value
say ~:echo &runtimepath~).

To invoke Esperanto spell say ~:setlocal spell spelllang=eo~; for the
help about speller commands see ~:h spell~.


* The Ispell Utility Program
** Esperanto encodings
Several encodings used with Esperanto text are supported:

1. The very best is Unicode or its subset, which contains the esperantic
   letters, like the Microsoft's WGL4; you can use it with xterm or
   Emacs under Unix, or with UniRed under Windows.

   Unicode is available in UTF-8 encoding, which is preferred for the
   Unices.

2. The second best choice used to be the Latin-3 encoding (ISO-8859-3);
   it is obsolete by now.

3. For the sake of the ASCII-impaired (and ANSI-impaired), there are two
   surrogates:

   - The TeX-like =^cirka^u-style: e^ho^san^go ^ciu^ja^ude=. Presently
     this is used as the reference representation, mainly because it is
     unambiguous (cf names like /Michaux/); and

   - The popular =cxirkaux-style=, which is also convenient for
     lexicographical ordering and thus is used in the dictionaries;
     besides, it uses ASCII letters only, and that makes it suitable for
     variable names in computer programs.

* Installation
** Simple Install (Unix or Cygwin)
1. Clone the =ispel-eo= project into your local repository:
#+begin_src sh :exports code
git clone https://github.com/pok49/ispell-eo
#+end_src
2. Go to the root directory =ispell-eo= (where this =readme= resides).
3. Say
#+begin_src sh :exports code
 make first
#+end_src

(or simply =make=) in order to check your ispell program.

Examine the output, e.g. do you have the permissions to write the hash
file(s) at the install phase?

4. If everything is OK, say

#+begin_src sh :exports code
  make eo
#+end_src

(to built the strict dictionary), or

#+begin_src sh
  make esperanto
#+end_src

(to built a permissive dictionary), or

#+begin_src sh
  make all
#+end_src

(to built both).

You may get a few warnings of from buildhash, like this one:

=eo.aff line 218: Flag must be alphabetic=

Just ignore them.

5. Type

#+begin_src sh
make install
#+end_src

to copy the hash file(s) to where ispell expects them to be (probably
you already have your american.hash there; normally you shall need the
root rights to make install).

After that you can call

#+begin_src sh
ispell -d eo = /filename/
#+end_src

** Vim
You'll need emacs to produce the dictionary for MySpell which used to
work with Open Office and which remains the base of Vim
Spell. Customize the word provision as described in “Customized Build”
(except the buildhash step); and then say

#+begin_src sh
make OO
#+end_src

That should produce the files =eo_l3.aff= and =eo_l3.dic= in the =work/=
subdirectory.

These are packed 

env LANG=eo.utf-8 vim -u NONE -e -c "mkspell! $HOME/.vim/spell/eo eo" -c q 2>&1 > err

** Customized Build
In order to enable selective construction of dictionaries, some entries
in the source dictionary =./src/vortoj.l3= are marked with keywords
indicating the special field they belong to:

=#arhx= : archaic words, like ‹ĥina› (= ‹ĉina›) or ‹malkompreni› (= ‹miskompreni›)\\
=#bot=  : a rare botanic word\\
=#Eujo= : vocabulary of the Esperanto Movement (of ‹Esperantujo›)\\
=#etn=  : ethnography; countries and geography\\
=#his=  : history\\
=#komp= : some computer-science terminology according to the [[http://www.esperanto.mv.ru/KompLeks/UTF8/DEFAULT.html][Komputada Leksikono]]\\
=#mav=  : redundant words, which are used by some esperantists, though they are less precise and unnecessarily complicate the language; e.g. ‹olda› (‹maljuna› *or* ‹malnova›), ‹mava› (= ‹malbona›)\\
=#pers= : given names and names of important personalities (e.g. ‹Petro›, ‹Zamenhof› ...)\\
=#pok=  : the words specific to my idiolect\\
=#rar=  : rare words which may coincide with a misspelling of a more frequent word; e.g. ‹ajuna›, ‹komanditi›, ‹liona›\\
=#var=  : variant which I do not use but which is frequent enough (e.g. ‹kemio›, ‹tekniko› opposed to ‹ĥemio› and ‹teĥniko›)

You can ~grep~,

#+begin_src sh
grep '#mav' ./src/vortoj.l3 | less
#+end_src

in order to see if you feel like me about them; you can either remove
all of them from the target dictionary, or remove the =#mav= mark from
those you do use and like; the default setting in the =./Makefile= is

#+begin_example
short_list      =  komp,etn,Eujo,pers,mll
eo_list         =  $(short_list),drv
esperanto_list  =  $(short_list),arhx,mav,rar
#+end_example

Unless included in the custom list (like =eo_list=), a marked word is
considered as a special one and is excluded from the build; the above
custom lists thus specify “positive criteria”. But some words have
several marks (e.g. a word may be “ethnic” and “obsolete” or dangerously
close to a misspelling of a frequent word). Thus a “negative” filtration
is available via the =$(sen)= macro; you can specify it in
=src/Makefile=, or in the command-line:

#+begin_src sh
make eo sen="arhx,rar"
#+end_src

In this way some otherwise eligible words from the =komp= or =etn= or
=mll= categories shall be discarded, if they are also obsolete or rare.

* Building vim spell
This package can now be used to build a vim spell dictionary:
1. Customize the lexical coverage as is described for the ispell
   build.
2. Convert the affix file to the my-spell format used by vim-spell and
   build the ~eo.utf-8.spl~ dictionary.
3. Install it into a directory where =vim= expects to find it.

These steps are done by the ~ispell-eo/Makefile~ in ~ispell-eo/oo~
directory (the name =oo= is a remnant from /Open Office/, which
equally used the MySpell format).

At the step (1) it is advisable to include the entries marked with
~#mav~ and ~#rar~: in vim-spell they will receive the qualifications
=BAD= and =RAR= and as such will be warn about unless you accept them
(in a runtime session).

Before invoking the =Makfile= check its =vim_spl_install_dir=
variable; by default it is set for a local install in your
=$(HOME)/.vim/spell= directory; you may prefer to set it globally for
a system-wide install.

After that say
#+begin_src sh
make vim
make install_vim
#+end_src
(or ~sudo make install_vim~ for a system-wide install).

* Usage
One same Ispell dictionary, e.g. =eo.hash=, can be used with several
input representations, specified in its affix file (e.g. =eo.aff=).
Each such representation is given an identifier in the affix file;
=eo.aff= defines the following representations:
1. =tex= is suited for TeX, and imitates the /dead keys:/
   ~e^ho^san^go ^ciu^ja^de~. It is the representation for which
   ispell-eo was originally designed (in connection with the
   “Komputika Leksikono”), and it remains the basic representation
   used in ispell-eo internally.
2. =cxirkaux= identifies x-style representation, which is the most
   popular ASCIIization of the Esperanto letters; ~ehxosxangxo
   cxiujxauxde~.
3. =latin3= is the straightforward application of ISO 8859-3 (aka
   Latin-3), which gives all the accented esperantic letters their
   canonical form; the apostrophe is represented as the ASCII ='=
   (0x27).
4. =latin3a= is like =latin3=, except that the apostrophe is
   represented by ‹´› (0xB4, spacing acute; see below the section
   [[* Apostrophe]]).
5. In =utf8= the accented letters are coded by 2 bytes each according
   to the UTF-8 encoding; apostrophe is encoded as =’= (U+2019,
   =#xE2 #x80 #x99=, right single quotation mark).

Unlike Aspell or Hunspell, Ispell allows switching among these
representations (via ~-T~ flag: ~-T tex~, or ~-T utf8~ etc, see below)
while using the one same hash file; this is an advantage of Ispell.
OTOH variation in the word provision (e.g. inclusion or exclusion of
the “bad” words) requires compilation of separate hash files (in our
case, =eo.hash= vs =esperanto.hash=); here Hunspell is more flexible,
it makes it possible to retain the bad words and issue warnings about
their use.

Some usage examples below are illustrated with specimen files from the
~ispell-eo/doc~ directory (which in my case is in my local
~$HOME/Git/~ repository). This should give you an idea about where and
what kind of files could be used in a given situation.

** Command line
   :PROPERTIES:
   :CUSTOM_ID: command-line
   :END:
You can use Ispell in a stand-alone mode, as a console program. The
usage depends on the encodings available at your terminal emulator for
representing the Esperanto letters.

*** ASCII terminal
This is available anywhere, you can use the =tex= (TeX) or the
=cxirkaux= representation. In the =tex= representation the word
/cxirkaux/ takes the form ~^cirka^u~; in the latter case the esperantic
accents are expressed with the letter =x=. In order to check a
file with the Ispell dialog editor simply type (without the ~$~ prompt):

#+begin_src sh
ispell -d eo -T cxirkaux $HOME/Git/ispell-eo/doc/ekz.cx
#+end_src

or

#+begin_src
ispell -d eo -T tex $HOME//Git/ispell-eo/doc/ekz.^c
#+end_src

Unfortunately, the Ispell editor is unaware of multibyte characters.

*** Unicode
The modern Linux terminals use the UTF-8 encoding by default, so you
can say there:

#+begin_src sh
ispell -d eo -T utf8 $HOME/Git/ispell-eo/doc/testo.u8
#+end_src

or submit test words in the command  line:

#+begin_src sh :exports both :results output :session
echo "Cxiujxauxda renkontigxo" | ispell -T utf8 -d eo
#+end_src

#+RESULTS:
: @(#) International Ispell Version 3.4.02 08 Jan 2021
: word: ok (derives from root ^JA^UDA)
: ok (derives from root RENKONTI)
:
: word:

(The suggestions are presented in the TeX notation.)

You can also get a list of all misspelled or unknown words from a text:

#+begin_src sh :exports both :results output :session
ispell -d eo -T utf8 -l < $HOME/Git/ispell-eo/doc/Cart.u8
#+end_src

#+RESULTS:
#+begin_example
fruictier
tistaro
cxef
ron
Ejxektive
eslas
atta
Cu
inlencis
jugxaiaj
mailongigis
elkurbigis
sxuitrojn
korekli
Arniko
konjxorme
Tli
#+end_example

(The file =Cart.u8= is produced by OCR of a letter by Th. Cart to Paul
Fruictier, published as a foreword to “Esperanta Sintakso” by the
latter.)

Again, the Ispell editor is available for this case too, and the
esperantic characters are shown as expected; but the non-Latin3
characters aren't made known to the editor, thus they are shown as
mojibake.

*** Latin-3
You may safely skip this section, unless you are interestwed in
history of computing or has to use software which accepts only single-byte
encodings.

The ISO 8859-3 encoding, aka Latin-3, is now rarely used; yet it is for
such a single-byte encoding that Ispell has been developed. Presently a
Latin-3 terminal is not readily available; one could install ~xterm~ and
its ~luit~ package; and then either launch =xterm= in Latin-3:
#+begin_src sh
xterm -en 'ISO 8859-3' &
#+end_src

or open a subsession with the =luit= filter:

#+begin_src sh :exports both :results output :session
luit -encoding 'ISO 8859-3'
echo eĥoŝanĝo | od -c
#+end_src

#+RESULTS:
: 0000000   e 304 245   o 305 235   a   n 304 235   o  \n
: 0000014

(the =echo|od= commands are added as a proof that the non-ASCII letters
are encoded in Latin-3).

In this environment the dialog Ispell Editor shall work as expected:
#+begin_src sh
ispell -d eo -T latin3 $HOME/Git/ispell-eo/doc/testo.l3
#+end_src
(the file =testo.l3= is written in the Latin-3 encoding).

In order to get a list of all misspelled or unknown words from a text in
the Latin-3 encoding you could say (in Linux):

#+begin_src sh
export LC_ALL=eo_XX.ISO-8859-3
ispell -d esperanto -T .l3 -l < FILENAME | sort -u
#+end_src

# Some more comments are in =legu-min.l3= (in esperanto).

** Emacs
Normally I use Ispell in an Emacs session. Emacs is distributed with
the =ispell.el= package, which provides an interface with the ispell
processes. This package includes, among others, specifications for
interactions with the permissive =esperanto= dictionary in two
representations: =latin3= and =tex=; in ispell.el they are named resp.
=esperanto= and =esperanto-tex=.

Don't be affraid of the name =latin3=: your text may be (and normally
is) in Unicode; the program seamlessly converts your UTF-8 words to
Latin-3 and back, using Latin-3 behind the scenes, so that you never notice
it. (The only exception is the limitation of the repertoire of the
characters available for word representation: e.g. you cannot use the curly
apostrophe, which is absent from Latin-3, and thus cannot be passed to
ispell).

As mentioned earlier, the Esperantic Ispell dictionaries can accept the
UTF-8 input; alas, for some bugs in =ispell.el= conversions from the
integer Unicode numbers to multibyte UTF-8 and back “may result in the
evil /misalignment error/”; the interaction with 1-byte codes (e.g.
Latin-3) is more stable. 

In my practical work I prefer the stricter =eo.hash= dictionary (and
the x-style ASCIIization); both are made available via the
=./emacs/ispell-ini.el= customization included in this distribution.
You may copy it into your =site-lisp= (or somewhere else on your emacs
=load-path=), and put this into your =.emacs=:

#+begin_src elisp
  (load "ispell-ini.el")
#+end_src

* Apostrophes

In English, the apostrophes appear either inside a word, like in
/isn't/ (and this case is addressed by the =boundarychars=
specification), or after a well-formed word, like in /for goodness'
sake/ (where the exclusion of the apostrophe does not raise a false
error report). Confusions with quotes are infrequent, though possible:

#+begin_src sh :exports both :results output :session
echo "'Tis the season to be jolly!" | ispell | head -2
#+end_src

#+RESULTS:
: @(#) International Ispell Version 3.4.02 08 Jan 2021
: word: how about: Dis, His, Is, Its, Otis, Pis, Sis, T's, TAs, This, Ti, Ti's, Tia, Tic, Tics, Tie, Ties, Tim, Tims, Tin, Tins, Tip, Tips, Tit, Tits, Ti s, Ti-s, Ts, TVs, T is, T-is, Vis

In Esperanto apostrophes appear mainly as the last of the word's
characters, i.e. in a most error-prone position:
: en nova form' eksonis nova kant'

Actually fine typography requires a curly apostrophe, and U+02BC would
be the most correct choice. Unfortunately the impact of the English
tradition, as presented in the above quotation, imposes the use of
U+2019 (e.g. great many fonts which follow the Microsoft's WGL4 standard
have U+2019 and lack U+02BC).

Thus the Vim Spell version of this dictionary uses U+2019 to represent
apostrophe.

Alas, this is impossible with Latin-3 or any other single-byte
encoding. As a workaround, alongside the traditional =latin3=
representation, which uses the ASCII apostrophe, there is the
=latin3a= representation, in which the ASCII apostrophe is ignored
(and available for any non-lexical usage); the Esperantic /letter
apostrophe/ is represented by ‹´› (/spacing acute,/, #xB4). 

In a normal piece of Esperantic prose apostrophes are very rare; so
spellcheck of such a piece using =latin3a= is easy, even in presence
of extra-lingual apostrophes (like in Wikipedia sources). 

OTOH, in poetry or in email correspondence one can use the ASCII
apostrophe and spellcheck with =latin3=, as usual.

In both cases, in order to prepare a typographical-quality text the
surrogate apostrophes (either ‹'› or ‹´›) should be replaced with
U+2019 or U+02BC.

#  LocalWords:  multibyte Fruictier Esperanta eo xB Komputika BC WGL
#  LocalWords:  Leksikono
